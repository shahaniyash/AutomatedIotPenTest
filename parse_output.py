import re
import sys

#Regular expressions
re_openport = re.compile("([0-9]*)\/tcp\s*open")
re_device_name = re.compile("Nmap scan report for ([^\s]*)\s*[^\s]*")
re_device_manufacturer = re.compile("([0-9|A-F]{2}[:]){5}[0-9|A-F]{2}\s[:]\s([^,]*)")
re_device_type = re.compile("Service Info: Device: ([^(;|\\n)]*)")
re_default_auth = re.compile("Default account found")
re_xss_weak_nikto = re.compile("XSS header is not defined")
re_xss_weak_nessus = re.compile("request forgery and cross-site scripting attacks against the web")
re_xss_weak_openvas = re.compile("Cross-site scripting (XSS) vulnerability")
re_https_enabled = re.compile("[0-9]*\/tcp\s*open[\s]*ssl/https")
re_no_web_server = re.compile("No web server found")
re_cve = re.compile("CVE-[0-9]{4}-[0-9]*")
re_buffer_overflow = re.compile("buffer[\s|\\n]*overflow[\s|\\n]*condition")
re_ssl_insecure_versions = re.compile("SSL Version 2 and 3 Protocol Detection")
re_self_signed_cert = re.compile("SSL Self-Signed Certificate")
re_ssl_cert_expired = re.compile("SSL Certificate Expiry")
re_weak_encryption_algo = re.compile("Weak Encryption Algorithms Supported")
re_weak_mac_algo = re.compile("Weak MAC Algorithms Supported")

ip = sys.argv[1]

#NMAP
with open('results/%s/%s-nmap.txt' % (ip,ip), 'r') as nmapf:
    #What ports are open?
    nmaptxt = nmapf.read()
    openports = re_openport.findall(nmaptxt)
    #Was this device ID'ed?
    device_name = re_device_name.findall(nmaptxt)
    #Was the device type determined? (ex. webcam, plug, printer, etc)
    device_type = re_device_type.findall(nmaptxt)
    #Is HTTPS enabled
    https_enabled = re_https_enabled.search(nmaptxt)

#NIKTO
with open('results/%s/%s-nikto.txt' % (ip,ip), 'r') as niktof:
    niktotxt = niktof.read()
    #Default Authentication worked
    default_auth = re_default_auth.search(niktotxt)
    #XSS vulnerabilities detected by Nikto
    xss_weak_nikto = re_xss_weak_nikto.search(niktotxt)
    #No web server found
    no_web_server = re_no_web_server.search(niktotxt)

#NESSUS
with open('results/%s/%s_nessus.csv' %(ip,ip), 'r') as nessusf:
    nessustxt = nessusf.read()
    #XSS/CSRF vulnerabilities detected
    xss_weak_nessus = re_xss_weak_nessus.search(nessustxt)
    #Device manufacturer
    device_manufacturer = re_device_manufacturer.search(nessustxt).group(2).rstrip("\n\r")
    nessus_cve = re_cve.findall(nessustxt)
    buffer_overflow = re_buffer_overflow.search(nessustxt)
    ssl_insecure_versions = re_ssl_insecure_versions.search(nessustxt)
    self_signed_cert = re_self_signed_cert.search(nessustxt)
    ssl_cert_expired = re_ssl_cert_expired.search(nessustxt)

#OPENVAS
with open('results/%s/%s_openvas.xml' %(ip,ip), 'r') as openvasf:
    openvastxt = openvasf.read()
    #CVEs
    openvas_cve = re_cve.findall(openvastxt)
    #XSS
    xss_weak_openvas = re_xss_weak_openvas.search(openvastxt)
    weak_encryption_algo = re_weak_encryption_algo.search(openvastxt)
    weak_mac_algo = re_weak_mac_algo.search(openvastxt)

#Could we identify the device?
if device_name:
    print ("Device Identified as %s" % device_name)
if device_manufacturer:
    print ("Device Manufacturer Identified as %s" % device_manufacturer)

#OWASP #1: Insecure web interface
print ("OWASP #1: Insecure web interface")
#Uses HTTPS (Nessus)
if not no_web_server and not https_enabled:
    print "\tWeb server in use but HTTPS is not enabled."
#Known Vulnerabilities (FOUND N CVEs) - CVEs
unique_cves = list(set().union(nessus_cve, openvas_cve))
print "\tFound %s unique CVEs"%len(unique_cves)

openvas_only = list(set(openvas_cve) - set(nessus_cve))
nessus_only = list(set(nessus_cve) - set(openvas_cve))
if openvas_only:
    print "\tOpenVAS found these %s CVEs which Nessus did not:" % len(openvas_only)
    print "\t" + str(openvas_only)
if nessus_only:
    print "\tNessus found these %s CVEs which OpenVAS did not:" % len(nessus_only)
    print "\t" + str(nessus_only)

#'Cross-site request forgery'
if xss_weak_nikto or xss_weak_nessus or xss_weak_openvas:
    print "\tWeb server is vulnerable to XSS and/or CSRF vulnerabilities."

#OWASP #2: Insufficient Authentication/Authorization
print ("OWASP #2: Insufficient Authentication/Authorization")
#Weak passwords
#Default passwords
if default_auth:
    print "\tDefault Authentication: Was able to log in with Default username and password."

#OWASP #3: Insecure Network Services
print ("OWASP #3: Insecure Network Services")
#Fuzzing TODO: When Yash is done
#Unneccessary Ports closed
if (len(openports)>2):
    print "\tDevice has several open ports. Check to verify all unnecessary ports are closed:"
    print "\t"+str(openports)
#Buffer Overflow - Nessus
if (buffer_overflow):
    print "\tDevice is vulnerable to buffer overflow attacks."

#OWASP #4: Lack of Transport Encryption
print ("OWASP #4: Lack of Transport Encryption")
#SSL/TLS configured properly
if ssl_insecure_versions:
    print "\tSSL Configuration: The service encrypts traffic using SSL Version Protocols with known vulnerabilities"
#SSH supported algorithms
if weak_encryption_algo:
    print "\tSSH supports weak encryption algorithms"
#SSL Certificate Expiry
if ssl_cert_expired:
    print "\tSSL Configuration: The SSL Certificate for this device's service is expired."
#Self-signed certificate
if self_signed_cert:
    print "\tSSL Configuration: This device's service uses a self-signed certificate."

#OWASP #5: Privacy Concerns
#Personal Data exported from device?

#OWASP #6: Insecure Cloud Interface
#CVEs - Nikto, OpenVAS, Nessus

#OWASP #7: Insecure Mobile Interface
#CVEs

#OWASP #9: Update Mechanism
